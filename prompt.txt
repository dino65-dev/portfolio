### üéØ Objective  
Build a **fully dynamic**, **interactive**, and **visually stunning** portfolio using **Next.js 15 App Router**, **TypeScript**, **Tailwind CSS** + **shadcn/ui**, and **Appwrite**. Fetch real-time data from GitHub and Appwrite backend services, enable dynamic routing, server‚Äêside rendering, and deliver advanced interactivity.

### üõ†Ô∏è Tech Stack & Hosting

- Framework: Next.js 15 (App Router, Server & Client Components)  
- Language: TypeScript  
- Styling: Tailwind CSS + shadcn/ui  
- Animations: Framer Motion  
- Data Layer:  
  - GitHub REST API for repo metadata  
  - Appwrite SDK (Databases, Functions, Auth, Storage, Realtime)  
- SEO: next-seo  
- Hosting & BaaS: Appwrite (Self-hosted or Appwrite Cloud)  

**Environment Variables**  
```
GITHUB_TOKEN  
NEXT_PUBLIC_APPWRITE_ENDPOINT  
NEXT_PUBLIC_APPWRITE_PROJECT_ID  
APPWRITE_API_KEY  
APPWRITE_DATABASE_ID  
APPWRITE_COLLECTION_CONTACT_ID  
```

---

## üóÇÔ∏è Routing & File Structure

```bash
/app
  /layout.tsx
  /page.tsx                  # "/"
/about
  /page.tsx                  
/projects
  /page.tsx                  # "/projects"
  /[owner]
    /[repo]
      /page.tsx              # "/projects/:owner/:repo"
/blog
  /page.tsx                  # "/blog"
  /[...slug]
    /page.tsx                # "/blog/*"
/contact
  /page.tsx                  
/lib
  /appwrite.ts               # Appwrite client initialization
  /github.ts                 # GitHub fetch helpers
```

- Use **dynamic segments** (`[owner]`, `[repo]`, `[...slug]`) for granular routes.
- Implement `generateStaticParams` for `/projects` and `/blog` to pre-render top repos/posts.
- Leverage **Server Components** for data fetching and **Client Components** for interactivity.

---

## / (Home)

- **Hero Section**  
  - 3D canvas with Three.js (rotating quantum grid)  
  - Animated intro via Framer Motion  
- **Dynamic GitHub Stats**  
  - Fetch star count, follower count, contribution graph SVG from GitHub REST API  
  - Display real-time via Appwrite Function scheduled every hour (cache in Appwrite DB)  
- **Call-to-Action**  
  - Buttons linking to `/projects` and `/contact`  
- **Real-time Theme Sync**  
  - Use BroadcastChannel API + Appwrite Realtime to sync light/dark mode across tabs  

---

## /about

- **Profile Bio**  
  - Markdown fetched from GitHub README via Appwrite Function  
- **Resume Download**  
  - Secure link to PDF stored in Appwrite Storage with temporary signed URL  
- **Skills & Timeline**  
  - Interactive timeline component powered by Framer Motion  
- **Live GitHub README**  
  - Render README from your `dino65-dev` repo with syntax highlighting  

---

## /projects and /projects/[owner]/[repo]

- **/projects**  
  - Server Component lists all public repos via GitHub API  
  - Optional: Fetch extra metadata from Appwrite DB for featured flags or tags  
  - Filter / search UI (Client Component)  
- **/projects/[owner]/[repo]**  
  - `generateStaticParams` pre-build top 10 repos, fallback `'blocking'` for others  
  - Page shows README, stars, forks, languages, last committed date  
  - ‚ÄòStar this repo‚Äô button triggers GitHub API via Appwrite Function (OAuth)  
  - Dynamic Open Graph image generated on-the-fly by an Appwrite Function  

---

## /blog and /blog/[...slug]

- **Content Source**  
  - Markdown files stored in Appwrite Storage or CMS collection  
- **/blog**  
  - SSG list of latest posts with excerpt, author, date  
  - Paginated via query params, cache in Appwrite DB  
- **/blog/[...slug]**  
  - Dynamic route for nested categories  
  - Render content with `next-mdx-remote`, embed interactive code blocks  
  - Optional comment widget using Appwrite Realtime DB for live discussions  

---

## /contact

- **Form**  
  - Name, email, message fields with React Hook Form + Yup validation  
  - reCAPTCHA v3 for bot protection  
- **Submission**  
  - POST to Appwrite Function (SMTP extension) sending email + storing message in DB  
  - Real-time success/failure status via Appwrite Realtime subscription  
- **Anti-spam & Rate-Limiting**  
  - Validate per-IP submissions in Appwrite Function  

---

## ‚ö° Performance & Optimization

- `<Image>` with `blurDataURL` placeholders  
- Dynamic imports (`next/dynamic`) for heavy modules (Three.js, MDX)  
- Preload fonts with `next/font`  
- Leverage Appwrite Function‚Äôs cron for background GitHub data refresh  
- Aim Lighthouse ‚â• 95 across performance, accessibility, SEO

---

## üîê SEO & Accessibility

- `next-seo` for dynamic metadata, JSON-LD  
- Auto-generate `sitemap.xml` & `robots.txt` via Appwrite Function  
- Semantic HTML, ARIA labels, keyboard navigation  
- Color contrast audit for light/dark modes  

---

## üåü Additional Advanced Enhancements

- **PWA**: offline caching, Appwrite Realtime for queued contact messages  
- **Internationalization**: `next-intl` + locale-based content in Appwrite DB  
- **Real-time Features**: live visitor count or chat widget via Appwrite Realtime  
- **Analytics**: integrate Plausible or Appwrite Functions logging  
- **A/B Testing**: serve variant UI via feature flags stored in Appwrite DB  
- **AI-Powered Blog Generator**: Appwrite Function calling OpenAI for draft creation  
